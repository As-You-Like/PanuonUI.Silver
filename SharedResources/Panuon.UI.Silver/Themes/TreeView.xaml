<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Panuon.UI.Silver"
                    xmlns:core="clr-namespace:Panuon.UI.Silver.Core"
                    xmlns:irs="clr-namespace:Panuon.UI.Silver.Internal.Resources"
                    xmlns:rs="clr-namespace:Panuon.UI.Silver.Resources"
                    xmlns:ic="clr-namespace:Panuon.UI.Silver.Internal.Controls">
    <ResourceDictionary.MergedDictionaries>
        <core:SharedResourceDictionary Source="pack://application:,,,/Panuon.UI.Silver;component/Resources/Converters.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style TargetType="TreeView">
        <Setter Property="local:TreeViewHelper.ItemsPadding"
                Value="15,0,0,0" />
        <Setter Property="local:TreeViewHelper.ItemsHeight"
                Value="30" />
        <Setter Property="VirtualizingStackPanel.IsVirtualizing"
                Value="True" />
        <Setter Property="VirtualizingStackPanel.VirtualizationMode"
                Value="Recycling" />
        <Setter Property="ScrollViewer.CanContentScroll"
                Value="True" />
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TreeView">
                    <Border x:Name="BdrMain"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ScrollViewer Focusable="False"
                                      Padding="{TemplateBinding Padding}"
                                      VerticalScrollBarVisibility="{Binding Path=(ScrollViewer.VerticalScrollBarVisibility),RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                                      HorizontalScrollBarVisibility="{Binding Path=(ScrollViewer.HorizontalScrollBarVisibility),RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                                      CanContentScroll="{Binding Path=(ScrollViewer.CanContentScroll),RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="local:TreeViewHelper.TreeViewStyle"
                     Value="Standard">
                <!--TreeViewHelper-->
                <Setter Property="local:TreeViewHelper.ItemsToggleBrush"
                        Value="Gray" />
                <Setter Property="local:TreeViewHelper.ItemsToggleHoverBrush"
                        Value="#CCCCCC" />
                <Setter Property="local:TreeViewHelper.ItemsExpandedToggleBrush"
                        Value="#3E3E3E" />
                <Setter Property="local:TreeViewHelper.ItemsHoverBackground"
                        Value="#FAFAFA" />
                <Setter Property="local:TreeViewHelper.ItemsSelectedBackground"
                        Value="#F1F1F1" />
            </Trigger>
            <Trigger Property="local:TreeViewHelper.TreeViewStyle"
                     Value="Modern">
                <Setter Property="local:TreeViewHelper.ItemsToggleBrush"
                        Value="#EEEEEE" />
                <Setter Property="local:TreeViewHelper.ItemsToggleHoverBrush"
                        Value="#CCCCCC" />
                <Setter Property="local:TreeViewHelper.ItemsSelectedToggleBrush"
                        Value="#3E3E3E" />
                <Setter Property="local:TreeViewHelper.ItemsHoverBackground"
                        Value="#FAFAFA" />
                <Setter Property="local:TreeViewHelper.ItemsSelectedBackground"
                        Value="#F1F1F1" />
            </Trigger>
            <Trigger Property="local:TreeViewHelper.TreeViewStyle"
                     Value="Chain">
                <Setter Property="local:TreeViewHelper.ItemsToggleBrush"
                        Value="Gray" />
                <Setter Property="local:TreeViewHelper.ItemsToggleHoverBrush"
                        Value="#CCCCCC" />
                <Setter Property="local:TreeViewHelper.ItemsSelectedForeground"
                        Value="#888888" />
            </Trigger>
            <Trigger Property="IsEnabled"
                     Value="False">
                <Setter Property="Opacity"
                        Value="0.4" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="{x:Static irs:ResourceKeys.TreeViewItemStandardTemplate}"
                     TargetType="{x:Type TreeViewItem}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Grid x:Name="GrdHeader"
                  Height="{Binding Path=(local:TreeViewHelper.ItemHeight),RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                  Background="{TemplateBinding Background}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <ToggleButton x:Name="TbtnToggle"
                              IsChecked="{Binding IsExpanded,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}">
                    <ToggleButton.Style>
                        <Style TargetType="{x:Type ToggleButton}">
                            <Setter Property="VerticalAlignment"
                                    Value="Center" />
                            <Setter Property="Content"
                                    Value="&#xe949;" />
                            <Setter Property="FontFamily"
                                    Value="pack://application:,,,/Panuon.UI.Silver;component/Resources/Fonts/#PanuonIcon" />
                            <Setter Property="FontSize"
                                    Value="{Binding FontSize, Converter={StaticResource {x:Static rs:Converters.DoublePlusConverter}}, ConverterParameter=2, RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}" />
                            <Setter Property="Foreground"
                                    Value="{Binding Path=(local:TreeViewHelper.ItemToggleBrush),RelativeSource={RelativeSource AncestorType=TreeViewItem},Mode=OneWay}" />
                            <Setter Property="Margin"
                                    Value="0,0,3,0" />
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="ToggleButton">
                                        <Border Background="Transparent">
                                            <ContentPresenter VerticalAlignment="Center"
                                                              HorizontalAlignment="Center" />
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Style.Triggers>
                                <Trigger Property="IsChecked"
                                         Value="True">
                                    <Setter Property="Content"
                                            Value="&#xe94a;" />
                                </Trigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                                   Value="True" />
                                        <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                                   Value="False" />
                                        <Condition Binding="{Binding Path=(local:TreeViewHelper.ItemToggleHoverBrush),Converter={StaticResource {x:Static rs:Converters.IsNotNullConverter}},RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}"
                                                   Value="True" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Foreground"
                                            Value="{Binding Path=(local:TreeViewHelper.ItemToggleHoverBrush),RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}" />
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                                   Value="True" />
                                        <Condition Binding="{Binding Path=(local:TreeViewHelper.ItemExpandedToggleBrush),Converter={StaticResource {x:Static rs:Converters.IsNotNullConverter}},RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}"
                                                   Value="True" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Foreground"
                                            Value="{Binding Path=(local:TreeViewHelper.ItemExpandedToggleBrush),RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}" />
                                </MultiDataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ToggleButton.Style>
                </ToggleButton>
                <StackPanel Grid.Column="1"
                            Orientation="Horizontal"
                            Margin="{TemplateBinding Padding}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                    <ic:IconControl x:Name="icIcon"
                                    Content="{Binding Path=(local:TreeViewHelper.ItemIcon), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                                    Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                    <ContentPresenter ContentSource="Header" />
                </StackPanel>
            </Grid>
            <ItemsPresenter x:Name="ItemsHost"
                            Grid.Row="1"
                            Visibility="{Binding IsExpanded, Converter={StaticResource {x:Static rs:Converters.TrueToVisibleConverter}},RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger SourceName="GrdHeader"
                     Property="IsMouseOver"
                     Value="True">
                <Setter Property="local:TreeViewHelper.IsMouseOver"
                        Value="True" />
            </Trigger>
            <Trigger SourceName="GrdHeader"
                     Property="IsMouseOver"
                     Value="False">
                <Setter Property="local:TreeViewHelper.IsMouseOver"
                        Value="False" />
            </Trigger>
            <Trigger Property="HasItems"
                     Value="False">
                <Setter TargetName="TbtnToggle"
                        Property="Visibility"
                        Value="Hidden" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{x:Static irs:ResourceKeys.TreeViewItemModernTemplate}"
                     TargetType="{x:Type TreeViewItem}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Grid x:Name="GrdHeader"
                  Background="{TemplateBinding Background}"
                  Height="{Binding Path=(local:TreeViewHelper.ItemHeight),RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <ToggleButton x:Name="TbtnToggle"
                              IsChecked="{Binding IsExpanded,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}">
                    <ToggleButton.Style>
                        <Style TargetType="{x:Type ToggleButton}">
                            <Setter Property="Background"
                                    Value="{Binding Path=(local:TreeViewHelper.ItemToggleBrush), RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}" />
                            <Setter Property="Margin"
                                    Value="0,0,3,0" />
                            <Setter Property="Width"
                                    Value="3" />
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="ToggleButton">
                                        <Rectangle Fill="{TemplateBinding Background}" />
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Style.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                                   Value="True" />
                                        <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                                   Value="False" />
                                        <Condition Binding="{Binding Path=(local:TreeViewHelper.ItemToggleHoverBrush),Converter={StaticResource {x:Static rs:Converters.IsNotNullConverter}},RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}"
                                                   Value="True" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Background"
                                            Value="{Binding Path=(local:TreeViewHelper.ItemToggleHoverBrush),RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}" />
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                                   Value="True" />
                                        <Condition Binding="{Binding Path=(local:TreeViewHelper.ItemExpandedToggleBrush),Converter={StaticResource {x:Static rs:Converters.IsNotNullConverter}},RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}"
                                                   Value="True" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Background"
                                            Value="{Binding Path=(local:TreeViewHelper.ItemExpandedToggleBrush),RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}" />
                                </MultiDataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ToggleButton.Style>
                </ToggleButton>
                <StackPanel Grid.Column="1"
                            Orientation="Horizontal"
                            Margin="{TemplateBinding Padding}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                    <ic:IconControl x:Name="icIcon"
                                    Content="{Binding Path=(local:TreeViewHelper.ItemIcon), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                                    Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                    <ContentPresenter ContentSource="Header" />
                </StackPanel>
            </Grid>
            <ItemsPresenter x:Name="ItemsHost"
                            Grid.Row="1"
                            Visibility="{Binding IsExpanded, Converter={StaticResource {x:Static rs:Converters.TrueToVisibleConverter}}, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger SourceName="GrdHeader"
                     Property="IsMouseOver"
                     Value="True">
                <Setter Property="local:TreeViewHelper.IsMouseOver"
                        Value="True" />
            </Trigger>
            <Trigger SourceName="GrdHeader"
                     Property="IsMouseOver"
                     Value="False">
                <Setter Property="local:TreeViewHelper.IsMouseOver"
                        Value="False" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{x:Static irs:ResourceKeys.TreeViewItemChainTemplate}"
                     TargetType="{x:Type TreeViewItem}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Grid x:Name="GrdHeader"
                  Margin="{TemplateBinding Padding}"
                  Background="{TemplateBinding Background}"
                  Height="{Binding Path=(local:TreeViewHelper.ItemHeight),RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <ToggleButton x:Name="TbtnToggle"
                              IsChecked="{Binding IsExpanded,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}">
                    <ToggleButton.Style>
                        <Style TargetType="{x:Type ToggleButton}">
                            <Setter Property="Foreground"
                                    Value="{Binding Path=(local:TreeViewHelper.ItemToggleBrush),RelativeSource={RelativeSource AncestorType=TreeViewItem},Mode=OneWay}" />
                            <Setter Property="VerticalAlignment"
                                    Value="Center" />
                            <Setter Property="Margin"
                                    Value="0,0,3,0" />
                            <Setter Property="Content"
                                    Value="&#xe945;" />
                            <Setter Property="FontFamily"
                                    Value="pack://application:,,,/Panuon.UI.Silver;component/Resources/Fonts/#PanuonIcon" />
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="ToggleButton">
                                        <Border Background="Transparent">
                                            <ContentPresenter VerticalAlignment="Center"
                                                              HorizontalAlignment="Center" />
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Style.Triggers>
                                <Trigger Property="IsChecked"
                                         Value="True">
                                    <Setter Property="Content"
                                            Value="&#xe947;" />
                                </Trigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                                   Value="True" />
                                        <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                                   Value="False" />
                                        <Condition Binding="{Binding Path=(local:TreeViewHelper.ItemToggleHoverBrush),Converter={StaticResource {x:Static rs:Converters.IsNotNullConverter}},RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}"
                                                   Value="True" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Foreground"
                                            Value="{Binding Path=(local:TreeViewHelper.ItemToggleHoverBrush),RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}" />
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                                   Value="True" />
                                        <Condition Binding="{Binding Path=(local:TreeViewHelper.ItemExpandedToggleBrush),Converter={StaticResource {x:Static rs:Converters.IsNotNullConverter}},RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}"
                                                   Value="True" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Foreground"
                                            Value="{Binding Path=(local:TreeViewHelper.ItemExpandedToggleBrush),RelativeSource={RelativeSource AncestorType=TreeViewItem}, Mode=OneWay}" />
                                </MultiDataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ToggleButton.Style>
                </ToggleButton>
                <Rectangle x:Name="RectHorizontal"
                           RenderOptions.EdgeMode="Aliased"
                           StrokeThickness="1"
                           Stroke="Gray"
                           StrokeDashArray="2,3"
                           VerticalAlignment="Center"
                           Visibility="{Binding HasItems, Converter={StaticResource {x:Static rs:Converters.TrueToCollapseConverter}},RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                           Margin="{Binding ActualWidth, Converter={StaticResource {x:Static irs:Converters.TreeViewChainHorizontalMarginConverter}},ElementName=TbtnToggle, Mode=OneWay}" />
                <StackPanel Grid.Column="1"
                            Orientation="Horizontal"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                    <ic:IconControl x:Name="icIcon"
                                    Content="{Binding Path=(local:TreeViewHelper.ItemIcon), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                                    Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                    <ContentPresenter ContentSource="Header" />
                </StackPanel>
            </Grid>
            <ItemsPresenter x:Name="ItemsHost"
                            Grid.Row="1"
                            Visibility="{Binding IsExpanded,Converter={StaticResource {x:Static rs:Converters.TrueToVisibleConverter}},RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}" />
            <Rectangle Grid.Row="1"
                       Visibility="{Binding IsExpanded,Converter={StaticResource {x:Static rs:Converters.TrueToVisibleConverter}},RelativeSource={RelativeSource TemplatedParent},Mode=OneWay }"
                       RenderOptions.EdgeMode="Aliased"
                       StrokeThickness="1"
                       Stroke="Gray"
                       StrokeDashArray="2,3"
                       HorizontalAlignment="Left">
                <Rectangle.Margin>
                    <MultiBinding Converter="{StaticResource {x:Static irs:Converters.TreeViewChainVerticalMarginConverter}}">
                        <Binding Path="ActualWidth"
                                 ElementName="TbtnToggle"
                                 Mode="OneWay" />
                        <Binding Path="Padding"
                                 RelativeSource="{RelativeSource TemplatedParent}"
                                 Mode="OneWay" />
                    </MultiBinding>
                </Rectangle.Margin>
            </Rectangle>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger SourceName="GrdHeader"
                     Property="IsMouseOver"
                     Value="True">
                <Setter Property="local:TreeViewHelper.IsMouseOver"
                        Value="True" />
            </Trigger>
            <Trigger SourceName="GrdHeader"
                     Property="IsMouseOver"
                     Value="False">
                <Setter Property="local:TreeViewHelper.IsMouseOver"
                        Value="False" />
            </Trigger>
            <Trigger Property="HasItems"
                     Value="False">
                <Setter TargetName="TbtnToggle"
                        Property="Visibility"
                        Value="Hidden" />
            </Trigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>


    <Style TargetType="TreeViewItem">
        <!--IconHelper-->
        <Setter Property="local:IconHelper.Foreground"
                Value="{Binding Foreground, RelativeSource={RelativeSource Self}}" />
        <!--TreeViewHelper-->
        <Setter Property="local:TreeViewHelper.ItemHeight"
                Value="{Binding Path=(local:TreeViewHelper.ItemsHeight),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="local:TreeViewHelper.ItemIcon"
                Value="{Binding Path=(local:TreeViewHelper.ItemsIcon),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="local:TreeViewHelper.ItemPadding"
                Value="{Binding Path=(local:TreeViewHelper.ItemsPadding),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="local:TreeViewHelper.ItemToggleEnabled"
                Value="{Binding Path=(local:TreeViewHelper.ItemsToggleEnabled),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="local:TreeViewHelper.ItemToggleBrush"
                Value="{Binding Path=(local:TreeViewHelper.ItemsToggleBrush),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="local:TreeViewHelper.ItemToggleHoverBrush"
                Value="{Binding Path=(local:TreeViewHelper.ItemsToggleHoverBrush),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="local:TreeViewHelper.ItemExpandedToggleBrush"
                Value="{Binding Path=(local:TreeViewHelper.ItemsExpandedToggleBrush),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="local:TreeViewHelper.ItemHoverForeground"
                Value="{Binding Path=(local:TreeViewHelper.ItemsHoverForeground),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="local:TreeViewHelper.ItemHoverBackground"
                Value="{Binding Path=(local:TreeViewHelper.ItemsHoverBackground),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="local:TreeViewHelper.ItemSelectedBackground"
                Value="{Binding Path=(local:TreeViewHelper.ItemsSelectedBackground),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="local:TreeViewHelper.ItemSelectedForeground"
                Value="{Binding Path=(local:TreeViewHelper.ItemsSelectedForeground),RelativeSource={RelativeSource AncestorType=TreeView}}" />
        <Setter Property="local:TreeViewHelper.ItemSelectedToggleBrush"
                Value="{Binding Path=(local:TreeViewHelper.ItemsSelectedToggleBrush),RelativeSource={RelativeSource AncestorType=TreeView}}" />

        <!--Properties-->
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="HorizontalContentAlignment"
                Value="Stretch" />
        <Setter Property="Template"
                Value="{StaticResource {x:Static irs:ResourceKeys.TreeViewItemStandardTemplate}}" />
        <Setter Property="Padding">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource {x:Static irs:Converters.TreeViewPaddingConverter}}">
                    <Binding Path="Padding"
                             RelativeSource="{RelativeSource AncestorType=TreeViewItem}"
                             Mode="OneWay" />
                    <Binding Path="(local:TreeViewHelper.ItemsPadding)"
                             RelativeSource="{RelativeSource AncestorType=TreeView}"
                             Mode="OneWay" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(local:TreeViewHelper.TreeViewStyle), RelativeSource={RelativeSource AncestorType=TreeView}, Mode=OneWay}"
                         Value="Modern">
                <Setter Property="Template"
                        Value="{StaticResource {x:Static irs:ResourceKeys.TreeViewItemModernTemplate}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(local:TreeViewHelper.TreeViewStyle), RelativeSource={RelativeSource AncestorType=TreeView}, Mode=OneWay}"
                         Value="Chain">
                <Setter Property="Template"
                        Value="{StaticResource {x:Static irs:ResourceKeys.TreeViewItemChainTemplate}}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(local:TreeViewHelper.IsMouseOver), RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                    <Condition Binding="{Binding IsSelected,RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="False" />
                    <Condition Binding="{Binding Path=(local:TreeViewHelper.ItemHoverForeground),Converter={StaticResource {x:Static rs:Converters.IsNotNullConverter}},RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground"
                        Value="{Binding Path=(local:TreeViewHelper.ItemHoverForeground),RelativeSource={RelativeSource Self}, Mode=OneWay}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(local:TreeViewHelper.IsMouseOver), RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                    <Condition Binding="{Binding IsSelected,RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="False" />
                    <Condition Binding="{Binding Path=(local:TreeViewHelper.ItemHoverBackground),Converter={StaticResource {x:Static rs:Converters.IsNotNullConverter}},RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Background"
                        Value="{Binding Path=(local:TreeViewHelper.ItemHoverBackground),RelativeSource={RelativeSource Self}, Mode=OneWay}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected,RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                    <Condition Binding="{Binding Path=(local:TreeViewHelper.ItemSelectedForeground),Converter={StaticResource {x:Static rs:Converters.IsNotNullConverter}},RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground"
                        Value="{Binding Path=(local:TreeViewHelper.ItemSelectedForeground),RelativeSource={RelativeSource Self}, Mode=OneWay}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected,RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                    <Condition Binding="{Binding Path=(local:TreeViewHelper.ItemSelectedBackground),Converter={StaticResource {x:Static rs:Converters.IsNotNullConverter}},RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Background"
                        Value="{Binding Path=(local:TreeViewHelper.ItemSelectedBackground),RelativeSource={RelativeSource Self}, Mode=OneWay}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsExpanded,RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                    <Condition Binding="{Binding IsSelected,RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="False" />
                    <Condition Binding="{Binding Path=(local:TreeViewHelper.ItemExpandedToggleBrush),Converter={StaticResource {x:Static rs:Converters.IsNotNullConverter}},RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="local:TreeViewHelper.ItemToggleBrush"
                        Value="{Binding Path=(local:TreeViewHelper.ItemExpandedToggleBrush), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected,RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                    <Condition Binding="{Binding Path=(local:TreeViewHelper.ItemSelectedToggleBrush),Converter={StaticResource {x:Static rs:Converters.IsNotNullConverter}},RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="local:TreeViewHelper.ItemToggleBrush"
                        Value="{Binding Path=(local:TreeViewHelper.ItemSelectedToggleBrush), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
            </MultiDataTrigger>
            <Trigger Property="IsEnabled"
                     Value="False">
                <Setter Property="Opacity"
                        Value="0.4" />
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>
